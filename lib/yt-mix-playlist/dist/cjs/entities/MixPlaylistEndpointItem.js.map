{"version":3,"file":"MixPlaylistEndpointItem.js","sourceRoot":"","sources":["../../../src/entities/MixPlaylistEndpointItem.ts"],"names":[],"mappings":"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","sourcesContent":["import Context from '../Context.js';\r\nimport { getContinuationResults, getWatchPageResults } from '../fetch.js';\r\nimport { parseText } from '../helper.js';\r\nimport MixPlaylistBasicInfo from './MixPlaylistBasicInfo.js';\r\nimport Thumbnail from './Thumbnail.js';\r\n\r\nconst MAX_CONTINUATION_RUNS = 5;\r\n\r\nexport default class MixPlaylistEndpointItem extends MixPlaylistBasicInfo {\r\n  /** @deprecated */\r\n  videoCount: string;\r\n  thumbnails: Thumbnail[];\r\n\r\n  constructor(data: any) {\r\n    super(data);\r\n\r\n    this.videoCount = parseText(data.videoCountText);\r\n    this.thumbnails = Thumbnail.parse(data.thumbnail?.thumbnails);\r\n  }\r\n\r\n  static #parse(data: any): MixPlaylistEndpointItem | null {\r\n    if (!data?.playlistId) {\r\n      return null;\r\n    }\r\n\r\n    return new MixPlaylistEndpointItem(data);\r\n  }\r\n\r\n  static async fetch(videoId: string, context: Context): Promise<MixPlaylistEndpointItem | null> {\r\n    const results = await getWatchPageResults(videoId, context);\r\n    const parsed = this.#findInResults(results);\r\n\r\n    if (typeof parsed === 'string') {\r\n      /**\r\n       * Continuation:\r\n       * Sometimes, the target is not among the items initially shown on the watch page.\r\n       * You would have to scroll further down the page to obtain more items which may then\r\n       * contain the target. Programatically, we use the continuation token to fetch\r\n       * these additional items.\r\n       */\r\n      return await this.#fetchByContinuation(context, parsed);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n\r\n  static async getGuessedEndpointItem(videoId: string): Promise<MixPlaylistEndpointItem | null> {\r\n    const guessedItemData = {\r\n      playlistId: `RD${videoId}`,\r\n      videoCountText: null,\r\n      thumbnail: {\r\n        thumbnails: []\r\n      },\r\n      title: {\r\n        simpleText: 'DUMMY'\r\n      },\r\n      longBylineText: 'DUMMY'\r\n    };\r\n    return this.#parse(guessedItemData);\r\n  }\r\n\r\n  static #findInResults(data: any, isContinuation = false): MixPlaylistEndpointItem | string | null {\r\n    const items = isContinuation ?\r\n      data?.onResponseReceivedEndpoints?.[0]?.appendContinuationItemsAction?.continuationItems :\r\n      data?.contents?.twoColumnWatchNextResults?.secondaryResults?.secondaryResults?.results;\r\n\r\n    if (!items) {\r\n      return null;\r\n    }\r\n\r\n    if (Array.isArray(items)) {\r\n      const item = items.find((item) => item\r\n        ?.lockupViewModel\r\n        ?.contentImage\r\n        ?.collectionThumbnailViewModel\r\n        ?.primaryThumbnail\r\n        ?.thumbnailViewModel\r\n        ?.overlays\r\n        ?.find((o: any) => o\r\n          ?.thumbnailOverlayBadgeViewModel\r\n          ?.thumbnailBadges\r\n          ?.[0]\r\n          ?.thumbnailBadgeViewModel\r\n          ?.icon\r\n          ?.sources\r\n          ?.find((s: any) => s?.clientResource?.imageName === 'MIX')\r\n        )\r\n      );\r\n      const itemData = Object.assign(\r\n        {},\r\n        {\r\n          videoCountText: null,\r\n          thumbnail: {\r\n            thumbnails: item?.lockupViewModel?.contentImage?.collectionThumbnailViewModel?.primaryThumbnail?.thumbnailViewModel?.image?.sources\r\n          },\r\n          title: {\r\n            simpleText: item?.lockupViewModel?.metadata?.lockupMetadataViewModel?.title?.content\r\n          },\r\n          longBylineText: 'DUMMY',\r\n          shareUrl: ''\r\n        },\r\n        item?.lockupViewModel?.rendererContext?.commandContext?.onTap?.innertubeCommand?.watchEndpoint\r\n      );\r\n\r\n      if (itemData) {\r\n        return this.#parse(itemData);\r\n      }\r\n\r\n      const token = items[items.length - 1]?.continuationItemRenderer?.continuationEndpoint?.continuationCommand?.token;\r\n      if (token) {\r\n        return token;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static async #fetchByContinuation(context: Context, token: string, rt = MAX_CONTINUATION_RUNS): Promise<MixPlaylistEndpointItem | null> {\r\n    if (rt === 0) {\r\n      /**\r\n       * Give up after MAX_CONTINUATION_RUNS. It is possible there is no mix playlist for the video\r\n       * after all and it would make no sense to keep on going forever.\r\n       */\r\n      return null;\r\n    }\r\n    const contents = await getContinuationResults(context, token);\r\n    const parsed = this.#findInResults(contents, true);\r\n\r\n    if (typeof parsed === 'string') {\r\n      // Got another continuation token - dig deeper.\r\n      return this.#fetchByContinuation(context, parsed, rt - 1);\r\n    }\r\n\r\n    return parsed;\r\n  }\r\n}\r\n"]}